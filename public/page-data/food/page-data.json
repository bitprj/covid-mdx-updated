{"componentChunkName":"component---node-modules-philpl-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/food","matchPath":"/food/*","result":{"data":{"deck":{"id":"cba165e1-103d-5bd1-a624-f06eeec2288f","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(L.Column, null, mdx(\"h1\", null, \"Concurrent Mode\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"Here is a simple React component\",\n    mdxType: \"Step\"\n  }, mdx(GreetingLoader, {\n    mdxType: \"GreetingLoader\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/greeting.1.1.js\",\n    \"file\": \"./src/greeting.1.1.js\"\n  }), \"import React from \\\"react\\\";\\nimport Row from \\\"./row\\\";\\n\\nexport default function Greeting(props) {\\n  return (\\n    <section>\\n      <Row label=\\\"Name\\\">{props.name}</Row>\\n    </section>\\n  );\\n}\\n\"))), mdx(Step, {\n    subtitle: \"we want to make the 'name' editable\",\n    mdxType: \"Step\"\n  }, mdx(GreetingLoader, {\n    mdxType: \"GreetingLoader\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"7 file=./src/greeting.1.1.js\",\n    \"file\": \"./src/greeting.1.1.js\"\n  }), \"import React from \\\"react\\\";\\nimport Row from \\\"./row\\\";\\n\\nexport default function Greeting(props) {\\n  return (\\n    <section>\\n      <Row label=\\\"Name\\\">{props.name}</Row>\\n    </section>\\n  );\\n}\\n\"))), mdx(Step, {\n    subtitle: \"so we turn the component into a class\",\n    mdxType: \"Step\"\n  }, mdx(GreetingLoader, {\n    version: \"class.1.1\",\n    mdxType: \"GreetingLoader\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/greeting.class.1.1.js\",\n    \"file\": \"./src/greeting.class.1.1.js\"\n  }), \"import React from \\\"react\\\";\\nimport Row from \\\"./row\\\";\\n\\nexport default class Greeting extends React.Component {\\n  render() {\\n    return (\\n      <section>\\n        <Row label=\\\"Name\\\">{this.props.name}</Row>\\n      </section>\\n    );\\n  }\\n}\\n\"))), mdx(Step, {\n    subtitle: \"add some state\",\n    mdxType: \"Step\"\n  }, mdx(GreetingLoader, {\n    version: \"class.1.2\",\n    mdxType: \"GreetingLoader\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./src/greeting.class.1.2.js\",\n    \"file\": \"./src/greeting.class.1.2.js\"\n  }), \"import React from \\\"react\\\";\\nimport Row from \\\"./row\\\";\\n\\nexport default class Greeting extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      name: \\\"Mary\\\"\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <section>\\n        <Row label=\\\"Name\\\">\\n          <input value={this.state.name} />\\n        </Row>\\n      </section>\\n    );\\n  }\\n}\\n\"))), mdx(Step, {\n    subtitle: \"and add a change handler that calls setState\",\n    mdxType: \"Step\"\n  }, mdx(GreetingLoader, {\n    version: \"class.1.3\",\n    mdxType: \"GreetingLoader\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"10:12,15:17,25 file=./src/greeting.class.1.3.js\",\n    \"10:12,15:17,25\": true,\n    \"file\": \"./src/greeting.class.1.3.js\"\n  }), \"import React from \\\"react\\\";\\nimport Row from \\\"./row\\\";\\n\\nexport default class Greeting extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      name: \\\"Mary\\\",\\n    };\\n    this.handleNameChange = this.handleNameChange.bind(\\n      this\\n    );\\n  }\\n\\n  handleNameChange(e) {\\n    this.setState({ name: e.target.value });\\n  }\\n\\n  render() {\\n    return (\\n      <section>\\n        <Row label=\\\"Name\\\">\\n          <input\\n            value={this.state.name}\\n            onChange={this.handleNameChange}\\n          />\\n        </Row>\\n      </section>\\n    );\\n  }\\n}\\n\"))), mdx(Step, {\n    subtitle: \"we can now edit the name and it should work\",\n    mdxType: \"Step\"\n  }, mdx(GreetingLoader, {\n    version: \"class.1.3\",\n    mdxType: \"GreetingLoader\"\n  }), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1:31 file=./src/greeting.class.1.3.js\",\n    \"1:31\": true,\n    \"file\": \"./src/greeting.class.1.3.js\"\n  }), \"import React from \\\"react\\\";\\nimport Row from \\\"./row\\\";\\n\\nexport default class Greeting extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      name: \\\"Mary\\\",\\n    };\\n    this.handleNameChange = this.handleNameChange.bind(\\n      this\\n    );\\n  }\\n\\n  handleNameChange(e) {\\n    this.setState({ name: e.target.value });\\n  }\\n\\n  render() {\\n    return (\\n      <section>\\n        <Row label=\\\"Name\\\">\\n          <input\\n            value={this.state.name}\\n            onChange={this.handleNameChange}\\n          />\\n        </Row>\\n      </section>\\n    );\\n  }\\n}\\n\")))), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(L.Column, {\n    sx: {\n      minHeight: '0'\n    }\n  }, mdx(\"h2\", null, \"Disclaimer\"), mdx(\"h3\", null, \"Information in this talk may not be accurate or may change in the future\")), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Time Slicing\"), mdx(\"h3\", null, \"\\\"Chunking slow rendering on subtree into little blocks of work by interrupting the work loop.\\\"\")), mdx(\"hr\", null), mdx(\"img\", {\n    src: DanDemoBlocking\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: DanDemoConcurrent\n  }), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(\"h3\", null, \"\\\"Wait a minute... I already know about this! What is this talk really about?\\\"\"), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h1\", null, \"Concurrent Mode\"), mdx(\"h2\", null, \"A chain of unfortunate consequences\")), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(\"h3\", null, \"How does React \\\"delay\\\" rendering?\"), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"Sources of Slowdown\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Slow component render functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Slow state setter or reducer updater functions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Slow effect functions\"))), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Deferred setState.\"), mdx(\"h3\", null, \"Any state setter or dispatch can be delayed.\")), mdx(DeferredSetState, {\n    mdxType: \"DeferredSetState\"\n  }), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Interrupt Rendering.\"), mdx(\"h3\", null, \"Any rendering can be interrupted and can be completed later before committing.\")), mdx(InterruptRendering, {\n    mdxType: \"InterruptRendering\"\n  }), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Oops #1\"), mdx(\"h3\", null, \"Delaying rendering is only safe when no effects are pending on a subtree.\")), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"The Hooks API.\"), mdx(\"h3\", null, \"This restriction is reflected in the hooks API with encapsulation of effects.\")), mdx(HooksAPI, {\n    mdxType: \"HooksAPI\"\n  }), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Hooks Timings.\"), mdx(\"h3\", null, \"With each hook we observe a part of the lifecycle and can react.\")), mdx(HooksAPITiming, {\n    mdxType: \"HooksAPITiming\"\n  }), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"The Lifecycle.\"), mdx(\"h3\", null, \"The lifecycle we observe has three phases repeating.\")), mdx(ComponentLifecycle, {\n    mdxType: \"ComponentLifecycle\"\n  }), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Observing the Lifecycle.\"), mdx(\"h3\", null, \"Overlapping the lifecycle with hooks, we see a phase that we can't observe...\")), mdx(ObservingLifecycleEvents, {\n    mdxType: \"ObservingLifecycleEvents\"\n  }), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Interrupting the Lifecycle.\"), mdx(\"h3\", null, \"Unfortunately this phase becomes very relevant in Strict and Concurrent Mode.\")), mdx(InterruptedLifecycle, {\n    mdxType: \"InterruptedLifecycle\"\n  }), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Oops #2\"), mdx(\"h3\", null, \"It's not possible to have a subscription or effect track the component lifecycle.\")), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Workaround\"), mdx(\"h3\", null, \"Resort to useSubscription\")), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Scheduler Priorities.\"), mdx(\"h3\", null, \"In Concurrent Mode the time budgets are switched on for time slicing.\")), mdx(SchedulerPriorities, {\n    mdxType: \"SchedulerPriorities\"\n  }), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Oops #3\"), mdx(\"h3\", null, \"Seems like React isn't all that predictable anymore.\")), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Workaround\"), mdx(\"h3\", null, \"Synchronous Subscriber and scheduled teardown\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/facebook/react/issues/15317#issuecomment-573337558\"\n  }), \"https://github.com/facebook/react/issues/15317#issuecomment-573337558\")), mdx(\"hr\", null), mdx(Background, {\n    mdxType: \"Background\"\n  }), mdx(\"h3\", null, \"\\\"We didn't yet get to what happens when an effect is slow, right?\\\"\"), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Tearing\"), mdx(\"h3\", null, \"\\\"When a subtree's renderered state falls behind while another subtree has committed updates already.\\\"\")), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"img\", {\n    src: Tearing2\n  }), mdx(\"img\", {\n    src: Tearing1\n  })), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"React's solution?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When an effect slows down, React can't safely interrupt or delay updates.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instead it batches all updates and switches back to blocking mode\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is called a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"deopt\"), \".\"))), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Oops #4\"), mdx(\"h3\", null, \"React Concurrent's deopt can be slower than Blocking was before.\")), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h2\", null, \"However\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This may still cause \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"tearing\"), \" when another update is scheduled during this blocking batch.\"))), mdx(\"hr\", null), mdx(L.Row, null, mdx(\"h2\", null, \"Oops #5\"), mdx(\"h3\", null, \"A new \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useMutableSource\"), \" hook is necessary to fix this tearing-during-deopt issue.\")), mdx(\"hr\", null), mdx(L.Column, null, mdx(\"h1\", null, \"Concurrent Mode: Oops\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/food/*","isCreatedByStatefulCreatePages":false,"id":"cba165e1-103d-5bd1-a624-f06eeec2288f","slug":"/food","title":"Concurrent Mode"}}}